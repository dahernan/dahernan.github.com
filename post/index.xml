<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on dahernan&#39;s blog </title>
    <link>http://dahernan.github.io/post/index.xml</link>
    <language>en-US</language>
    <author>Enthusiastic Hugo User</author>
    <rights>Copyright (c) 2014, Enthusiastic Hugo User; all rights reserved.</rights>
    <updated>Mon, 12 Oct 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Golang Taipei Gathering</title>
      <link>http://dahernan.github.io/2015/10/12/golang-taipei-gathering/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2015/10/12/golang-taipei-gathering/</guid>
      <description>&lt;p&gt;A couple of weeks ago, taking advance of my trip to Taiwan I had the opportunity to assist and speak at the &lt;a href=&#34;http://golang.kktix.cc/events/gtg15&#34;&gt;Golang Taipe Gathering #15&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/taipei4.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The event was hosted by the company who made &lt;a href=&#34;http://cardinalblue.com/&#34;&gt;PicCollage&lt;/a&gt; that is a little app to make collage of photos that is very popular is Asia (over 12 million active users), and that&amp;rsquo;s probably one of the reasons that Go is very popular in Asia, you have lots of users, so you need technology easy to scale.&lt;/p&gt;

&lt;p&gt;I enjoyed a lot the presentation that &lt;a href=&#34;https://twitter.com/kerkerj&#34;&gt;Jerry Huang&lt;/a&gt; did about Gobot with one of the Sphero balls. The presentation was in Chinese, but the slides were in English so it was not very difficult to follow even I don&amp;rsquo;t understand any Chinese word.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/taipei2.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;My presentation was about how to implement Microservices in Go, based in the work that I did for my last client. As a take out, is good to have a complete self explained slides when you are presenting for a non English speakers, it makes much easier to follow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/taipei1.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;After the talk, &lt;a href=&#34;https://twitter.com/hSATAC&#34;&gt;Ash&lt;/a&gt; the organiser of the meetup, and his friend &lt;a href=&#34;https://twitter.com/j100002ben&#34;&gt;Benjamin&lt;/a&gt; take us out for dinner in a local place, were the food was awesome! Thank you so much guys, was so much fun!.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/taipei3.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GolangUK 2015 Conference</title>
      <link>http://dahernan.github.io/2015/08/28/golanguk-2015-conference/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2015/08/28/golanguk-2015-conference/</guid>
      <description>

&lt;p&gt;Last Friday I had the pleasure to parcipate as an organiser of the &lt;a href=&#34;http://www.golanguk.com/about/&#34;&gt;GolangUK 2015&lt;/a&gt;, the first conference around &lt;a href=&#34;http://www.golang.org&#34;&gt;Go language&lt;/a&gt; that was celebrated in UK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/golanguk.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Little bit of history&lt;/h2&gt;

&lt;p&gt;Everything started in the &lt;a href=&#34;http://www.meetup.com/Go-London-User-Group/&#34;&gt;Go London user group meetup&lt;/a&gt; I was talking with my friend &lt;a href=&#34;https://twitter.com/agonzalezro&#34;&gt;Alex&lt;/a&gt; about the idea of organise a big event community driven and non profit, so we get together a couple of times to talk about it, to see the steps that we had to do to organize it.&lt;/p&gt;

&lt;p&gt;We did some research and we left the idea for a while, mainly because It was a lot of work in a field that we didn&amp;rsquo;t have any experience.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;And sometimes the magic just happens&lt;/h3&gt;

&lt;p&gt;When we were not sure about the idea, &lt;a href=&#34;https://twitter.com/johannacherry&#34;&gt;Johanna&lt;/a&gt; contacted Alex. She&amp;rsquo;s a really good Go developer and also one of the organisers (with &lt;a href=&#34;https://twitter.com/sa,&#34;&gt;Sam&lt;/a&gt;) of the &lt;a href=&#34;http://phpconference.co.uk/&#34;&gt;PHP UK Conference&lt;/a&gt; a conference with long track of successful  editions.&lt;/p&gt;

&lt;p&gt;We talked about the idea in a pub, and the team was the perfect combination to make GolangUK :)&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;GolangUK 2015 the good&lt;/h2&gt;

&lt;p&gt;I really enjoyed the day, even with the little tension to be an organizer, was almost a perfect day, really good speakers, awesome venue with really good food. Talking with old friends and making new.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;The bad&lt;/h2&gt;

&lt;p&gt;The only complain that had is that we didn&amp;rsquo;t have enough gophers for everyone, we tried to give the gophers to the people arriving first, but was difficult to manage with the all bags around the registration point.&lt;/p&gt;

&lt;p&gt;You really feel bad when someone ask you, &amp;ldquo;can I get a gopher for my daughter?&amp;rdquo; and you gave the last one 2 minutes ago.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Diversity&lt;/h2&gt;

&lt;p&gt;Was really difficult to encourage and find diversity in the speakers and delegates in this type of conference, specially with the call for papers, I had some help from people in the slack community to promote the event, but even with that there is a lot of room for improvement, any feedback and ideas are welcome.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Thank you and see you next year&lt;/h2&gt;

&lt;p&gt;Thank you everybody to make it happen, and my highlight and special thanks for the closing keynote to &lt;a href=&#34;https://twitter.com/dgryski&#34;&gt;Damian&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The videos should be realeased soon :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Discovery with Mangos and Go</title>
      <link>http://dahernan.github.io/2015/03/17/service-discovery-with-mangos-and-go/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2015/03/17/service-discovery-with-mangos-and-go/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/gdamore/mangos&#34;&gt;Mangos&lt;/a&gt; is a pure Go implementation of &lt;a href=&#34;http://nanomsg.org/index.html&#34;&gt;Scalable Protocolos&lt;/a&gt;, there is a good introduction about it, in this &lt;a href=&#34;http://www.bravenewgeek.com/fast-scalable-networking-in-go-with-mangos/&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, that blog gave me the idea to implement a simple way to do service discovery. The common solution for service discovery is using some kind of distribuited system to store the changes, the usual solutions for this problems are &lt;a href=&#34;http://zookeeper.apache.org/&#34;&gt;Zookeeper&lt;/a&gt;, &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;etcd&lt;/a&gt;, &lt;a href=&#34;https://www.consul.io/&#34;&gt;consul&lt;/a&gt;, &lt;a href=&#34;https://github.com/Netflix/eureka&#34;&gt;eureka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s usually pretty good, but sometimes you don&amp;rsquo;t need that kind of solution to solve a simple problem. You may not have many servers and using a library could be enough to solve that problem.&lt;/p&gt;

&lt;p&gt;So I released a small library to do service discovery based in Mangos, I called:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dahernan/gopherdiscovery&#34;&gt;gopherdiscovery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It uses one socket for emiting a survey heartbeat.
&lt;img src=&#34;https://docs.google.com/drawings/d/1XvKaxDBhWLeOoQHiofWJNAvo1139i_3Z9NCUDZJCJ8c/pub?w=480&amp;amp;h=360&#34; alt=&#34;Survey&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;With the heartbeat from the server you can know the clients that are online, and whenever a client goes down, you&amp;rsquo;ll know it in the next heartbeat slot.&lt;/p&gt;

&lt;p&gt;But you need to notify in some way to the interested parties that new clients are connected or disconnected. And for that I use mangos pub/sub socket to publish the changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/14vcCmiCFywml5P9ApN76hRbcb7B_PkzSo6XUoOAMcRg/pub?w=480&amp;amp;h=360&#34; alt=&#34;Pub/Sub&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You can have clients that are aware of the changes in other peers, or you can have a pure subscriber that only receives the changes.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Use case&lt;/h2&gt;

&lt;p&gt;A good use case is for example, to update the peers in &lt;a href=&#34;https://github.com/golang/groupcache&#34;&gt;groupcache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can have a very light server for service discovery:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;
urlServer := &amp;quot;tcp://10.0.0.100:40007&amp;quot;
urlPubSub := &amp;quot;tcp://10.0.0.100:50007&amp;quot;

// on the server
server, err := gopherdiscovery.Server(urlServer, urlPubSub, opts)
server.Wait()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for every single client, use &lt;a href=&#34;https://github.com/golang/groupcache&#34;&gt;groupcache&lt;/a&gt; in combination with &lt;a href=&#34;https://github.com/dahernan/gopherdiscovery&#34;&gt;gopherdiscovery&lt;/a&gt; to update the peers that are doing the cache.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;var peers chan []string

urlServer := &amp;quot;tcp://10.0.0.100:40007&amp;quot;
urlPubSub := &amp;quot;tcp://10.0.0.100:50007&amp;quot;
me := &amp;quot;http://10.0.0.1:8080&amp;quot;

// any of the peers
poolGroupCache := groupcache.NewHTTPPool(me)

client, err := gopherdiscovery.ClientWithSub(urlServer, urlPubSub, me)

peers, err = client.Peers() 
for nodes := ranges peers {
    // every time there is a change in the peers -&amp;gt; Set in groupcache
    poolGroupCache.Set(nodes...)    
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example could be, adding and removing proxies from a loadbalancer.&lt;/p&gt;

&lt;p&gt;If you like it, &lt;a href=&#34;https://github.com/dahernan/gopherdiscovery&#34;&gt;check the source and the docs&lt;/a&gt;, and any feedback is welcome!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Authentication library for Go net/http and Negroni</title>
      <link>http://dahernan.github.io/2015/03/05/authentication-library-for-go-net/http-and-negroni/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2015/03/05/authentication-library-for-go-net/http-and-negroni/</guid>
      <description>

&lt;p&gt;Some weeks ago in the &lt;a href=&#34;http://blog.gopheracademy.com/gophers-slack-community/&#34;&gt;Gophers Slack Community&lt;/a&gt; somebody asked about how to do authentication, for a http server in Go.
I could make up a gist, based in a web application that I had from some months ago. But, I decided to put everything together and realease a simple library to do Authentication based in a configurable store.&lt;/p&gt;

&lt;p&gt;I named &lt;a href=&#34;https://github.com/dahernan/auth&#34;&gt;Auth&lt;/a&gt;, not very original name, but at least it shows the purpose.&lt;/p&gt;

&lt;p&gt;Some of the features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication of the users via configurable store&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net/http&lt;/code&gt; compatible&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codegangsta/negroni&#34;&gt;Negroni&lt;/a&gt; middleware&lt;/li&gt;
&lt;li&gt;Use of JSON Web Tokens (JWT)&lt;/li&gt;
&lt;li&gt;JSON interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following example is using &lt;code&gt;net/http&lt;/code&gt; to secure the path &lt;code&gt;/secure&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/boltdb/bolt&amp;quot;
    &amp;quot;github.com/dahernan/auth&amp;quot;
    &amp;quot;github.com/dahernan/auth/jwt&amp;quot;
    &amp;quot;github.com/dahernan/auth/store&amp;quot;
)

func main() {
    // Using BoltDB to store the users
    db, err := bolt.Open(&amp;quot;usersdb&amp;quot;, 0600, &amp;amp;bolt.Options{})
    if err != nil {
        log.Fatalln(&amp;quot;Can not open the database&amp;quot;, err)
    }
    defer db.Close()

    boltStore, err := store.NewBoltStore(db, &amp;quot;users&amp;quot;)
    if err != nil {
        log.Fatalln(&amp;quot;Can not create bolt store&amp;quot;, err)
    }

    // check github.com/dgrijalva/jwt-go for the JWT options
    options := jwt.Options{
        SigningMethod: &amp;quot;RS256&amp;quot;,
        PrivateKey:    Private, // $ openssl genrsa -out app.rsa keysize
        PublicKey:     Public,  // $ openssl rsa -in app.rsa -pubout &amp;gt; app.rsa.pub
        Expiration:    60 * time.Minute,
    }

    // creates the route with Bolt and JWT options
    authRoute := auth.NewAuthRoute(boltStore, options)

    http.HandleFunc(&amp;quot;/login&amp;quot;, authRoute.Login)
    http.HandleFunc(&amp;quot;/signin&amp;quot;, authRoute.Signin)

    // protects this handle 
    http.Handle(&amp;quot;/secure&amp;quot;, authRoute.AuthHandlerFunc(SecurePlace))
    
    http.ListenAndServe(&amp;quot;:1212&amp;quot;, nil)

}

func SecurePlace(w http.ResponseWriter, req *http.Request) {
    userId := auth.GetUserId(req)
    token := auth.GetToken(req)
    fmt.Fprintf(w, &amp;quot;Hey %v you have a token %v&amp;quot;, userId, token)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use it, you can do some http request to try it, for example:&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Signin&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XPOST &amp;quot;http://localhost:1212/signin&amp;quot; -d&#39;
&amp;gt; {
&amp;gt;    &amp;quot;email&amp;quot;: &amp;quot;dahernan@dahernan.com&amp;quot;,
&amp;gt;    &amp;quot;password&amp;quot;: &amp;quot;justTest123&amp;quot;
&amp;gt; }&#39;

{&amp;quot;id&amp;quot;:&amp;quot;dahernan@dahernan.com&amp;quot;}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Login&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XPOST &amp;quot;http://localhost:1212/login&amp;quot; -d&#39;
&amp;gt; {
&amp;gt;    &amp;quot;email&amp;quot;: &amp;quot;dahernan@dahernan.com&amp;quot;,
&amp;gt;    &amp;quot;password&amp;quot;: &amp;quot;justTest123&amp;quot;
&amp;gt; }&#39;

{&amp;quot;token&amp;quot;:&amp;quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0MjU0MDcyMTksImlhdCI6MTQyNTQwMzYxOSwic3ViIjoiZGFoZXJuYW5AZGFoZXJuYW4uY29tIn0.inRfTdlPZ4dKbHY2dHzTqmyBzLIW9_52oc8NFh_yfnrVEdCzfIAIHIVo_7cksUdUdQ4yMciy-JbuQc8hECx31a3RDNkH2iUSDaueZqM0nJaHsWdLAtO_8nz_zX6AqxPPP-cTb5Qjw3R8cmsrFTwpqTn7agDxgypn7NxFW67WIq_XcjH9Ev9VKFqC7AoV9wo2noX6l42JL_338UoNib3K--cUKTeJdCjygj-LH2TBobG9t3Wn55rFmr1oVfKMOTVx1eJpRl376tUemD-IXxCN0ZG788TLihLhXolbumnHzJ13AzriQEHTOc2GKtwT5M-DqEpj9lhV6uu6clPRFRs9O2PB82t4LkuhWra62-h9_R7fBaCN1-ni03RI-tXKUpWz1XFfcbHzCXzFOhl0fb_h_xpx-xEDKFbEE6JDQowxIIFNTIElv7kz0wke_QUddK1Lz--StMr2BS9Q3h3Xk1XC0dgHsSfZDvF-qbud-asUbaoaokNlsAm0kwUSMTJ_oBi1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;GET Secure url without Token&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET &amp;quot;http://localhost:1212/secure&amp;quot;

Error no token is provided
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;GET Secure url with Token&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0MjU0MDcyMTksImlhdCI6MTQyNTQwMzYxOSwic3ViIjoiZGFoZXJuYW5AZGFoZXJuYW4uY29tIn0.inRfTdlPZ4dKbHY2dHzTqmyBzLIW9_52oc8NFh_yfnrVEdCzfIAIHIVo_7cksUdUdQ4yMciy-JbuQc8hECx31a3RDNkH2iUSDaueZqM0nJaHsWdLAtO_8nz_zX6AqxPPP-cTb5Qjw3R8cmsrFTwpqTn7agDxgypn7NxFW67WIq_XcjH9Ev9VKFqC7AoV9wo2noX6l42JL_338UoNib3K--cUKTeJdCjygj-LH2TBobG9t3Wn55rFmr1oVfKMOTVx1eJpRl376tUemD-IXxCN0ZG788TLihLhXolbumnHzJ13AzriQEHTOc2GKtwT5M-DqEpj9lhV6uu6clPRFRs9O2PB82t4LkuhWra62-h9_R7fBaCN1-ni03RI-tXKUpWz1XFfcbHzCXzFOhl0fb_h_xpx-xEDKFbEE6JDQowxIIFNTIElv7kz0wke_QUddK1Lz--StMr2BS9Q3h3Xk1XC0dgHsSfZDvF-qbud-asUbaoaokNlsAm0kwUSMTJ_oBi1&amp;quot; -XGET &amp;quot;http://localhost:1212/secure&amp;quot;

Hey dahernan@dahernan.com you have a token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can implement your own store, you only have to implement this interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type UserRepository interface {
    Signin(email, pass string) (string, error)
    Login(email, pass string) (string, error)
    UserByEmail(email string) (User, error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think the library is ideal to implement a little Authentication Microservice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Context and Cancellation of goroutines</title>
      <link>http://dahernan.github.io/2015/02/04/context-and-cancellation-of-goroutines/</link>
      <pubDate>Wed, 04 Feb 2015 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2015/02/04/context-and-cancellation-of-goroutines/</guid>
      <description>&lt;p&gt;Yesterday I went to the event London Go Gathering, where all the talks had a great level, but particulary &lt;a href=&#34;https://twitter.com/peterbourgon&#34;&gt;Peter Bourgon&lt;/a&gt; gave me idea to write about the excelent package &lt;a href=&#34;http://blog.golang.org/context&#34;&gt;context&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Context is used to pass request scoped variables, but in this case I&amp;rsquo;m only going to focus in cancelation signals.&lt;/p&gt;

&lt;p&gt;Lets say that I have a program that execute a long running function, in this case &lt;code&gt;work&lt;/code&gt; and we run it in a separate go routine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
    &amp;quot;time&amp;quot;

)

var (
    wg sync.WaitGroup
)

func work() error {
    defer wg.Done()

    for i := 0; i &amp;lt; 1000; i++ {
        select {
        case &amp;lt;-time.After(2 * time.Second):
            fmt.Println(&amp;quot;Doing some work &amp;quot;, i)
        }
    }
    return nil
}


func main() {
    fmt.Println(&amp;quot;Hey, I&#39;m going to do some work&amp;quot;)

    wg.Add(1)
    go work()
    wg.Wait()

    fmt.Println(&amp;quot;Finished. I&#39;m going home&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run work.go
Hey, I&#39;m going to do some work
Doing some work  0
Doing some work  1
Doing some work  2
Doing some work  3
...
Doing some work  999
Finished. I&#39;m going home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now imagine that we have to call that &lt;code&gt;work&lt;/code&gt; function from a user interaction or a http request, we probably don&amp;rsquo;t want to wait forever for that goroutine to finish, so a common pattern is to set a timeout, using a buffered channel, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;time&amp;quot;
)

func work() error {
    for i := 0; i &amp;lt; 1000; i++ {
        select {
        case &amp;lt;-time.After(2 * time.Second):
            fmt.Println(&amp;quot;Doing some work &amp;quot;, i)
        }
    }
    return nil
}

func main() {
    fmt.Println(&amp;quot;Hey, I&#39;m going to do some work&amp;quot;)

    ch := make(chan error, 1)
    go func() {
        ch &amp;lt;- work()
    }()

    select {
    case err := &amp;lt;-ch:
        if err != nil {
            log.Fatal(&amp;quot;Something went wrong :(&amp;quot;, err)
        }
    case &amp;lt;-time.After(4 * time.Second):
        fmt.Println(&amp;quot;Life is to short to wait that long&amp;quot;)
    }

    fmt.Println(&amp;quot;Finished. I&#39;m going home&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run work.go
Hey, I&#39;m going to do some work
Doing some work  0
Doing some work  1
Life is to short to wait that long
Finished. I&#39;m going home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, is a little bit better because, the main execution doesn&amp;rsquo;t have to wait for &lt;code&gt;work&lt;/code&gt; if it&amp;rsquo;s timing out.&lt;/p&gt;

&lt;p&gt;But it has a problem, if my program is still running like for example a web server, even if I don&amp;rsquo;t wait for the function &lt;code&gt;work&lt;/code&gt; to finish, the goroutine it would be running and consuming resources. So I need a way to cancel that goroutine.&lt;/p&gt;

&lt;p&gt;For cancelation of the goroutine we can use the context package. We have to change the function to accept an argument of type &lt;code&gt;context.Context&lt;/code&gt;, by convention it&amp;rsquo;s usuallly the first argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;golang.org/x/net/context&amp;quot;
)

var (
    wg sync.WaitGroup
)

func work(ctx context.Context) error {
    defer wg.Done()

    for i := 0; i &amp;lt; 1000; i++ {
        select {
        case &amp;lt;-time.After(2 * time.Second):
            fmt.Println(&amp;quot;Doing some work &amp;quot;, i)

        // we received the signal of cancelation in this channel    
        case &amp;lt;-ctx.Done():
            fmt.Println(&amp;quot;Cancel the context &amp;quot;, i)
            return ctx.Err()
        }
    }
    return nil
}

func main() {   
    ctx, cancel := context.WithTimeout(context.Background(), 4*time.Second)
    defer cancel()

    fmt.Println(&amp;quot;Hey, I&#39;m going to do some work&amp;quot;)

    wg.Add(1)
    go work(ctx)
    wg.Wait()

    fmt.Println(&amp;quot;Finished. I&#39;m going home&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run work.go
Hey, I&#39;m going to do some work
Doing some work  0
Cancel the context  1
Finished. I&#39;m going home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty good!, apart that the code looks more simple to manage the timeout, now we are making sure that the function &lt;code&gt;work&lt;/code&gt; doesn&amp;rsquo;t waste any resource.&lt;/p&gt;

&lt;p&gt;These examples are good to learn the basics, but let&amp;rsquo;s try to make it more real.
Now the &lt;code&gt;work&lt;/code&gt; function is going to do an http request to a server and the server is going to be this other program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

// Lazy and Very Random Server 
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math/rand&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {
    http.HandleFunc(&amp;quot;/&amp;quot;, LazyServer)
    http.ListenAndServe(&amp;quot;:1111&amp;quot;, nil)
}

// sometimes really fast server, sometimes really slow server
func LazyServer(w http.ResponseWriter, req *http.Request) {
    headOrTails := rand.Intn(2)

    if headOrTails == 0 {
        time.Sleep(6 * time.Second)
        fmt.Fprintf(w, &amp;quot;Go! slow %v&amp;quot;, headOrTails)
        fmt.Printf(&amp;quot;Go! slow %v&amp;quot;, headOrTails)
        return
    }

    fmt.Fprintf(w, &amp;quot;Go! quick %v&amp;quot;, headOrTails)
    fmt.Printf(&amp;quot;Go! quick %v&amp;quot;, headOrTails)
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Randomly is going to be very quick or very slow, we can check that with &lt;code&gt;curl&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl http://localhost:1111/
Go! quick 1
$ curl http://localhost:1111/
Go! quick 1
$ curl http://localhost:1111/
*some seconds later*
Go! slow 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we are going to make an http request to this server, in a goroutine, but if the server is slow we are going to Cancel the request and return quickly, so we can manage the cancellation and free the connection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;sync&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;golang.org/x/net/context&amp;quot;
)

var (
    wg sync.WaitGroup
)

// main is not changed
func main() {
    ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
    defer cancel()

    fmt.Println(&amp;quot;Hey, I&#39;m going to do some work&amp;quot;)

    wg.Add(1)
    go work(ctx)
    wg.Wait()

    fmt.Println(&amp;quot;Finished. I&#39;m going home&amp;quot;)

}

func work(ctx context.Context) error {
    defer wg.Done()

    tr := &amp;amp;http.Transport{}
    client := &amp;amp;http.Client{Transport: tr}

    // anonymous struct to pack and unpack data in the channel
    c := make(chan struct {
        r   *http.Response
        err error
    }, 1)

    req, _ := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;http://localhost:1111&amp;quot;, nil)
    go func() {
        resp, err := client.Do(req)
        fmt.Println(&amp;quot;Doing http request is a hard job&amp;quot;)
        pack := struct {
            r   *http.Response
            err error
        }{resp, err}
        c &amp;lt;- pack
    }()

    select {
    case &amp;lt;-ctx.Done():
        tr.CancelRequest(req)
        &amp;lt;-c // Wait for client.Do
        fmt.Println(&amp;quot;Cancel the context&amp;quot;)
        return ctx.Err()
    case ok := &amp;lt;-c:
        err := ok.err
        resp := ok.r
        if err != nil {
            fmt.Println(&amp;quot;Error &amp;quot;, err)
            return err
        }

        defer resp.Body.Close()
        out, _ := ioutil.ReadAll(resp.Body)
        fmt.Printf(&amp;quot;Server Response: %s\n&amp;quot;, out)

    }
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run work.go
Hey, I&#39;m going to do some work
Doing http request is a hard job
Server Response: Go! quick 1
Finished. I&#39;m going home

$ go run work.go
Hey, I&#39;m going to do some work
Doing http request is a hard job
Cancel the context
Finished. I&#39;m going home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see in the output, we avoid the slow responses from the server.&lt;/p&gt;

&lt;p&gt;In the client the tcp connection is canceled so is not going to be busy waiting for a slow response, so we don&amp;rsquo;t waste resources.&lt;/p&gt;

&lt;p&gt;Happy coding gophers!.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speaking at the Scrumday Oviedo</title>
      <link>http://dahernan.github.io/2014/12/16/speaking-at-the-scrumday-oviedo/</link>
      <pubDate>Tue, 16 Dec 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2014/12/16/speaking-at-the-scrumday-oviedo/</guid>
      <description>&lt;p&gt;Last Saturday I was speaking in the &lt;a href=&#34;http://scrumdayoviedo.com/&#34;&gt;ScrumDay Oviedo&lt;/a&gt;, just 30 km away from my home city (Gijon) hehehe.
I was invited by &lt;a href=&#34;https://twitter.com/raul_herranz&#34;&gt;Raul Herranz&lt;/a&gt; and his company &lt;a href=&#34;http://utopicainformatica.com/&#34;&gt;Utopica Informatica&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My talk title could be translated to &amp;ldquo;Five advices to improve doing Scrum&amp;rdquo; &lt;a href=&#34;https://docs.google.com/presentation/d/1J-Y63hUcuE8HgFFg195Qd2R5Z2dfclXoaDhU7_289fM&#34;&gt;(slides in Spanish)&lt;/a&gt;,
despite talking about Scrum, the advices could be apply to any Agile practice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/scrum_day1.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/adelatorrefoss&#34;&gt;Antonio de la Torre&lt;/a&gt; did a good sketch to summarize the talk :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/scrum_day2.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Was a little bit difficult speak in Spanish, I don&amp;rsquo;t use the language for work since 6 years ago, so I don&amp;rsquo;t know if some of the terms are translated or not, and it&amp;rsquo;s not easy to find the right word.&lt;/p&gt;

&lt;p&gt;The people asked a lot of questions about &lt;a href=&#34;http://dahernan.github.io/2013/10/14/continuous-deployment-trends/&#34;&gt;Continuous Delivery&lt;/a&gt;, they were very interested about the topic.
At the end I was happy with the result, is good to contribute back in some way to your home community.&lt;/p&gt;

&lt;p&gt;I spent the rest of the day as public, were I really enjoyed the talk by &lt;a href=&#34;https://twitter.com/alozalv&#34;&gt;Angélica&lt;/a&gt;
and the care that &lt;a href=&#34;https://twitter.com/oyabun&#34;&gt;Javier Alonso&lt;/a&gt; puts in the design of the slides.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/scrum_day3.png&#34; alt=&#34;alt&#34; /&gt;

&lt;img src=&#34;/images/scrum_day4.png&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I usually try to mingle and meet new people in these kind of events but this time I was so happy to talk with old friends that I forgot that part for a bit.
Overall, a really nice experience that I hope I can repeat.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker image for Go service from the Scratch</title>
      <link>http://dahernan.github.io/2014/12/09/docker-image-for-go-service-from-the-scratch/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2014/12/09/docker-image-for-go-service-from-the-scratch/</guid>
      <description>

&lt;p&gt;Today I changed the script to dockerize go projects &lt;a href=&#34;https://github.com/dahernan/godockerize&#34;&gt;godockerize&lt;/a&gt;, to support the &amp;lsquo;scratch&amp;rsquo; image.&lt;/p&gt;

&lt;p&gt;The way I do it, is cross compile for Linux, and after that add the binary to the image, that&amp;rsquo;s all. Ready to build and run.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;To enable cross compile on Mac to build Linux executable&lt;/h3&gt;

&lt;p&gt;Follow this steps&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local/go/src

$ sudo GOOS=linux CGO_ENABLED=0 ./make.bash --no-clean

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can try it doing, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ GOOS=linux CGO_ENABLED=0 go build -o gopherscraper

# Checking that is linux binary
$ file gopherscraper
gopherscraper: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Use the new flag &amp;lsquo;scratch&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;Once you activate cross compilation you can use the new flag to generate and build the Docker image from the &amp;lsquo;scratch&amp;rsquo;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/dahernan/gopherscraper

# Run godockerize using -scratch
$ godockerize -expose 3001 -scratch

Dockerfile generated, you can build the image with:
$ docker build -t gopherscraper .


# Run my microservice
$ docker run --rm  -p 3001:3001 -e ES=192.168.1.101 gopherscraper

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get a really light image, using this method :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REPOSITORY                    TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
gopherscraper                 latest              8dad2e0ca7f9        55 minutes ago      10.61 MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Generate a Dockerfile for Go Microservice</title>
      <link>http://dahernan.github.io/2014/12/05/generate-a-dockerfile-for-go-microservice/</link>
      <pubDate>Fri, 05 Dec 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2014/12/05/generate-a-dockerfile-for-go-microservice/</guid>
      <description>

&lt;p&gt;As part of doing a few Go REST Services, for every project I usually put a Dockerfile to compile an run the project in a Docker container.
The Dockerfile it&amp;rsquo;s always the same, just change it the project name, and I&amp;rsquo;m using &lt;a href=&#34;https://github.com/tools/godep&#34;&gt;godep&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So in DRY spirit a did a Minimal Viable Script to generate the Dockerfile for me, the project is in Github and I called &lt;a href=&#34;https://github.com/dahernan/godockerize&#34;&gt;godockerize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Dockerfile is based in the golang image, it follows these steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Based in golang:stable&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://github.com/tools/godep&#34;&gt;godep&lt;/a&gt; for vendoring the dependencies. (if you are not using godep, It will break).&lt;/li&gt;
&lt;li&gt;Uses the project name and the root directory as a ENTRYPOINT&lt;/li&gt;
&lt;li&gt;Restores the dependencies via &amp;lsquo;godep restore&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Compiles the project&lt;/li&gt;
&lt;li&gt;Exposes the port&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is inspired by this two blog post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.charmes.net/2014/11/release-go-code-and-others-via-docker.html&#34;&gt;http://blog.charmes.net/2014/11/release-go-code-and-others-via-docker.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/docker&#34;&gt;https://blog.golang.org/docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Install godockerize&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/dahernan/godockerize

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Usage Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# Go to the root directory of your project, for example
$ cd $GOPATH/src/github.com/dahernan/gopherscraper


# Run godockerize exposing the port 3001
$ godockerize -expose 3001

Dockerfile generated, you can build the image with:
$ docker build -t gopherscraper .

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Run my microservice&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm  -p 3001:3001 -e ES=192.168.1.101 gopherscraper

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Scrap the Web with Go</title>
      <link>http://dahernan.github.io/2014/12/03/scrap-the-web-with-go/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2014/12/03/scrap-the-web-with-go/</guid>
      <description>&lt;p&gt;As a part of a project that I&amp;rsquo;ve been involved, I released opensource a Scraper in Go that I called &lt;a href=&#34;https://github.com/dahernan/gopherscraper&#34;&gt;gopherscraper&lt;/a&gt; is a scraper to extract information of ecommerce sites, but you can extrapolate and extract information of any website with &amp;lsquo;items&amp;rsquo;, like news, videos, and so on.&lt;/p&gt;

&lt;p&gt;The project comes with a Rest API that you can &lt;a href=&#34;https://github.com/dahernan/gopherscraper&#34;&gt;check on Github&lt;/a&gt; for more detail, and is based in CSS Selectors.
To store the items, I use Redis and ElasticSearch.&lt;/p&gt;

&lt;p&gt;Let me share a few insights in the development of the library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://github.com/PuerkitoBio/goquery&#34;&gt;Goquery&lt;/a&gt;, to extract information based on CSS Selectors.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The interface for scrapping is really simple just one function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type ScrapperItems interface {
    Scrap(selector ScrapSelector) (string, chan ItemResult, error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The interface to store the result items is also very simple. You can store the items in Redis, ElasticSearch or as a file.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type StorageItems interface {
    StoreItem(it ItemResult)
}

// store items as a File
func (sto FileStorage) StoreItem(it ItemResult) {
    if it.Err != nil {
        return
    }
    WriteJsonToDisk(sto.baseDir, it.Item)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Was easy to create a recursive Scraper, using composition, based in a normal scraper.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I started with not concurrency code at all, and after make it work, I put the go routines and waitgroups to syncronize the completion of the scraper.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (d DefaultScrapper) Scrap(selector ScrapSelector) (string, chan ItemResult, error) {
    wg := &amp;amp;sync.WaitGroup{}
    err := validateSelector(selector)
    if err != nil {
        return &amp;quot;&amp;quot;, nil, err
    }

    items := make(chan ItemResult, bufferItemsSize)

    jobId := &amp;quot;D&amp;quot; + GenerateStringKey(selector)
    pages := paginatedUrlSelector(selector)

    wg.Add(len(pages))
    for i, _ := range pages {
        go doScrapFromUrl(jobId, pages[i], items, wg)
    }

    go closeItemsChannel(jobId, items, wg)

    return jobId, items, err
}

func doScrapFromUrl(jobId string, s ScrapSelector, items chan ItemResult, wg *sync.WaitGroup) {
    defer wg.Done()
    doc, err := fromUrl(s)
    if err != nil {
        log.Printf(&amp;quot;ERROR [%s] Scrapping %v with message %v&amp;quot;, jobId, s.Url, err.Error())
        return
    }
    DocumentScrap(jobId, s, doc, items)
}

func closeItemsChannel(jobId string, items chan ItemResult, wg *sync.WaitGroup) {
    wg.Wait()
    close(items)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;I limited the number of concurrent connections with a buffered channel.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func fromUrl(selector ScrapSelector) (*goquery.Document, error) {
    lockLimitConnections()
    defer unlockLimitConnections()

    req, err := http.NewRequest(&amp;quot;GET&amp;quot;, selector.Url, nil)
    if err != nil {
        return nil, err
    }

    req.Header.Add(&amp;quot;User-Agent&amp;quot;, defaultUserAgent)

    res, err := httpClient().Do(req)
    if err != nil {
        return nil, err
    }
    return goquery.NewDocumentFromResponse(res)
}

func UseMaxConnections(max int) {
    semaphoreMaxConnections = make(chan struct{}, max)
}

func lockLimitConnections() {
    semaphoreMaxConnections &amp;lt;- struct{}{}
}
func unlockLimitConnections() {
    &amp;lt;-semaphoreMaxConnections
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the end It was a really fun, doing what it looks like a tedious job. And I get a clean JSON document when there is not any API available to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speaking at London Go Meetup</title>
      <link>http://dahernan.github.io/2014/09/10/speaking-at-london-go-meetup/</link>
      <pubDate>Wed, 10 Sep 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2014/09/10/speaking-at-london-go-meetup/</guid>
      <description>&lt;p&gt;The Go London Meetup is the best place in London to learn Go and find gophers.
As part of the meetup &lt;a href=&#34;http://www.meetup.com/Go-London-User-Group/events/203467502/&#34;&gt;I gave a talk&lt;/a&gt; about Go&amp;rsquo;s Testing Ecosystem.&lt;/p&gt;

&lt;p&gt;You can get the code that I used for the examples, and the slides &lt;a href=&#34;https://github.com/dahernan/gophertest&#34;&gt;https://github.com/dahernan/gophertest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end more than a session about all testing ecosystem, was a kind of live coding session about how I use &lt;a href=&#34;https://github.com/smartystreets/goconvey&#34;&gt;Goconvey&lt;/a&gt; to do testing.
So it&amp;rsquo;s a pitty that there is no video for the talk, because the slides and the code is not very representative.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/gomeetup.jpeg&#34; alt=&#34;alt&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I had good feedback, and the feeling of contribute back to the community.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Error handling and pointers in Go lang</title>
      <link>http://dahernan.github.io/2014/06/22/error-handling-and-pointers-in-go-lang/</link>
      <pubDate>Sun, 22 Jun 2014 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2014/06/22/error-handling-and-pointers-in-go-lang/</guid>
      <description>&lt;p&gt;A couple of weeks ago I went to the &lt;a href=&#34;http://www.meetup.com/Go-London-User-Group/&#34;&gt;Go London User Group&lt;/a&gt; and one of the talks was about &lt;a href=&#34;https://www.youtube.com/watch?v=Ph4eYD7Bgek&#34;&gt;error handling in Go&lt;/a&gt; by Daniel Morsing (really good talk).&lt;/p&gt;

&lt;p&gt;After thinking, I rembembered that there is another antipattern when using pointers to error, for example here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;// http://play.golang.org/p/Xktu2Jz-Zc

package main

import &amp;quot;fmt&amp;quot;

type MyError struct {
    path string
    msg  string
}

func (e MyError) Error() string {
    return e.path + &amp;quot;:&amp;quot; + e.msg
}

func uglyBug(blowup bool) error {
    var err *MyError = nil
    if blowup {
        err = &amp;amp;MyError{&amp;quot;path1&amp;quot;, &amp;quot;msg1&amp;quot;}
    }
    return err
}

func main() {
    e1 := uglyBug(false)
    if e1 != nil {
        fmt.Println(&amp;quot;Pointer -&amp;gt; &amp;quot;, e1)
    } else {
        fmt.Println(&amp;quot;It&#39;s ok&amp;quot;)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:
&lt;code&gt;
Pointer -&amp;gt;  &amp;lt;nil&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The value of &lt;em&gt;e1&lt;/em&gt; is going to be &lt;em&gt;not nil&lt;/em&gt;, because the interface is not nil (it needs to have the value and the type nil, to return nil).&lt;/p&gt;

&lt;p&gt;To fix this, you have to explicit return nil.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type MyError struct {
    path string
    msg  string
}

func (e MyError) Error() string {
    return e.path + &amp;quot;:&amp;quot; + e.msg
}

func fixed(blowup bool) error {
    if blowup {
        return &amp;amp;MyError{&amp;quot;path1&amp;quot;, &amp;quot;msg1&amp;quot;}
    }
    return nil
}

func main() {
    e1 := fixed(false)
    if e1 != nil {
        fmt.Println(&amp;quot;Pointer -&amp;gt; &amp;quot;, e1)
    } else {
        fmt.Println(&amp;quot;It&#39;s ok&amp;quot;)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:
&lt;code&gt;
It&#39;s ok
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So always do a explicit return nil, when you need an interface to be nil.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Deployment Trends</title>
      <link>http://dahernan.github.io/2013/10/14/continuous-deployment-trends/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2013/10/14/continuous-deployment-trends/</guid>
      <description>

&lt;p&gt;This is a post putting together what companies are doing in the Continuous Deployment space, and what are the current trends.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Deployments at Etsy&lt;/h2&gt;

&lt;p&gt;Here are some data about Etsy deploys to production (only data for half of the year 2013)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Average Deploys per day: 35.75&lt;/li&gt;
&lt;li&gt;Average Authors per deploy: 7.01&lt;/li&gt;
&lt;li&gt;Average Commits per deploy: 11.25&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we can read between lines is, if your &amp;ldquo;Average Deploys per day&amp;rdquo; is lower than 1 you&amp;rsquo;re not doing Continuous Deployment, (you probably releasing often but not doing it continuously)&lt;/p&gt;

&lt;p&gt;Some insides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part of the Etsy Bootcamp is to deploy code in production, on your first day.&lt;/li&gt;
&lt;li&gt;Config System / Feature Switches: You have the ability to enable a feature, for group of users, a percentage of users, or for A/B testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The typical dev cycle is:
Deploy your feature in production ASAP -&amp;gt; Enable for QAs and Admins -&amp;gt; Public Prototype (5%-10% of users) -&amp;gt; A/B Test (50% users) -&amp;gt; Full website&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Branching in Code: Use your configuration system, to keep your feature independent, and avoid to have long live branches.&lt;/li&gt;
&lt;li&gt;Versioning: There is no versioning and no rollback, you always push forward (You can disable features if something goes wrong)&lt;/li&gt;
&lt;li&gt;Experimentation: They have a platform to manage what features are used, and when they are in production. (First they use a tool &amp;ldquo;Launch Calendar&amp;rdquo;, now more advanced unified launch management tool called &amp;ldquo;Catapult&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Metrics: Detect if any of the changes goes wrong (statsd, ganglia, etc)&lt;/li&gt;
&lt;li&gt;Start simple &amp;gt; Deploy ASAP &amp;gt; Experiment &amp;gt; Learn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Etsy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/etsy-deploy&#34;&gt;Etsy Deploys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devslovebacon.com/conferences/bacon-2013/talks/bring-the-noise-continuously-deploying-under-a-hailstorm-of-metrics&#34;&gt;Etsy deployments and metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Deployments at IMVU&lt;/h2&gt;

&lt;p&gt;IMVU is &amp;ldquo;the inventor&amp;rdquo; of Continuous Delivery but also leading the &amp;ldquo;Lean Startup&amp;rdquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploys per day: 50&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some insides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The time to deploy is around 20 minutes&lt;/li&gt;
&lt;li&gt;The feedback on features is always from real customers&lt;/li&gt;
&lt;li&gt;Metrics, as an essential part of the deployments&lt;/li&gt;
&lt;li&gt;Also branching in code and feature enabled/disabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IMVU:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/bgdurrett/sds-2010-continuous-deployment-at-imvu&#34;&gt;Continuous Deployment at IMVU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Deployments at Quora&lt;/h2&gt;

&lt;p&gt;Quora is doing also well&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploys per day: 46&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some insides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the developer&amp;rsquo;s side, only a single command is required to push code to production: git push&lt;/li&gt;
&lt;li&gt;It takes six to seven minutes on average for a revision to start running in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.quora.com/Continuous-Deployment-at-Quora&#34;&gt;Continuous Deployment at Quora&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;How to enable Continuous Deployment&lt;/h2&gt;

&lt;p&gt;I highly recommend to watch this talk, because is a good summary of all the techniques:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.confreaks.com/videos/2365-mwrc2013-the-many-ways-to-deploy-continuously&#34;&gt;Many Ways to Deploy Continuously&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some common patterns for devs are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Branching in Code&lt;/li&gt;
&lt;li&gt;Versioning the Database Schema&lt;/li&gt;
&lt;li&gt;Deploy to handle multiple versions at the same time (a deploy on 1000 machines could take a while, be ready to have multiple versions at the same time)&lt;/li&gt;
&lt;li&gt;Ship an image (AMIs, dokus, docker containers &amp;hellip;) isolate problems and makes your environment predictable and testable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Other links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/Continuous-Testing-Build-Cloud&#34;&gt;Continuous Testing at Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/bliki/ContinuousDelivery.html&#34;&gt;Martin Fowler on Continuous Delivery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/articles/Continous-Delivery-Patterns&#34;&gt;Continous Delivery Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker to run Elasticsearch</title>
      <link>http://dahernan.github.io/2013/08/04/docker-to-run-elasticsearch/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2013/08/04/docker-to-run-elasticsearch/</guid>
      <description>&lt;p&gt;In this post I&amp;rsquo;m going to explain how to create and use a docker image, for easy access to &lt;a href=&#34;http://www.elasticsearch.org&#34;&gt;elasticsearch&lt;/a&gt; for development purposes.
If you don&amp;rsquo;t know &lt;a href=&#34;http://docker.io/&#34;&gt;docker&lt;/a&gt;, just check it out. In my opinion is the way that everybody is going to distribuite webapps soon.&lt;/p&gt;

&lt;p&gt;In the same way that the project has library dependencies, your app usually depends on more things. Let&amp;rsquo;s say the database or in this case the search engine.
Why not distribute the dependency with the code? Well even if you have a VM could be to much.&lt;/p&gt;

&lt;p&gt;With containers that is over, now you can distribute with your source a Dockerfile, or even &lt;a href=&#34;http://blog.docker.io/2013/07/how-to-use-your-own-registry/&#34;&gt;have yor own repository of docker images&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For my dependency &lt;a href=&#34;http://www.elasticsearch.org&#34;&gt;elasticsearch&lt;/a&gt; a need a new Dockerfile, so the next developer could reproduce my environment very easy.&lt;/p&gt;

&lt;p&gt;So this is the content of my &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/dahernan/6149626&#34;&gt;https://gist.github.com/dahernan/6149626&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I can build the image with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t=&amp;quot;elasticsearch&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And after a while if I do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images

REPOSITORY          TAG                 ID                  CREATED             SIZE
ubuntu              12.04               8dbd9e392a96        3 months ago        131.5 MB (virtual 131.5 MB)
ubuntu              12.10               b750fe79269d        4 months ago        24.65 kB (virtual 180.1 MB)
ubuntu              latest              8dbd9e392a96        3 months ago        131.5 MB (virtual 131.5 MB)
ubuntu              precise             8dbd9e392a96        3 months ago        131.5 MB (virtual 131.5 MB)
ubuntu              quantal             b750fe79269d        4 months ago        24.65 kB (virtual 180.1 MB)
elasticsearch       latest              ef2487bb289d        52 seconds ago      12.29 kB (virtual 558.7 MB)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can see my new image &lt;em&gt;elasticsearch&lt;/em&gt; there, and finally I can run elasticsearch in that container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d elasticsearch

$ docker ps
ID                  IMAGE                  COMMAND                CREATED             STATUS              PORTS
29fd16250848        elasticsearch:latest   /bin/sh -c elasticse   32 seconds ago      Up 32 seconds       9200-&amp;gt;9200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now my elasticsearch instance is running in its own container, forwarding the port 9200. So if I want to try to run a elasticsearch cluster, I&amp;rsquo;m only have to run more containers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile and reload your package in Go lang</title>
      <link>http://dahernan.github.io/2013/08/03/compile-and-reload-your-package-in-go-lang/</link>
      <pubDate>Sat, 03 Aug 2013 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2013/08/03/compile-and-reload-your-package-in-go-lang/</guid>
      <description>&lt;p&gt;One of the Go lang goodness is the blazing fast compiler (can you hear me Scala? :P), that can give you the productivity of a interpreted language.
But to be, productive in the same way, at least building Web services, you need get rid of the recompile and kill/reload cycle for your application.&lt;/p&gt;

&lt;p&gt;I tried a couple of utils to do that, and the most simple that it works is &lt;a href=&#34;https://github.com/skelterjohn/rerun&#34;&gt;&lt;em&gt;rerun&lt;/em&gt;&lt;/a&gt;
You can just clone the repository, do a &amp;lsquo;go install&amp;rsquo; and add the binary to your PATH variable.&lt;/p&gt;

&lt;p&gt;And now with a simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rerun --test github.com/dahernan/goangular/server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have my webserver running, and every time that I make a change in the code, the test are passed again, and the server is reload. I know, right now my server It&amp;rsquo;s very light and It does that in milliseconds, but I&amp;rsquo;m sure it&amp;rsquo;s not going to reach the start time of any Java application :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Json service in Go lang</title>
      <link>http://dahernan.github.io/2013/06/21/json-service-in-go-lang/</link>
      <pubDate>Fri, 21 Jun 2013 00:00:00 UTC</pubDate>
      <author>Enthusiastic Hugo User</author>
      <guid>http://dahernan.github.io/2013/06/21/json-service-in-go-lang/</guid>
      <description>&lt;p&gt;These days I&amp;rsquo;m experimenting with Go lang, I love the language. I like specially the simplicity, you can check out
the principles of design, in the presentation from Rob Pike, &lt;a href=&#34;http://www.stanford.edu/class/ee380/Abstracts/100428-pike-stanford.pdf&#34;&gt;Another Go At Language Design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, my first try in Go is to do a small Rest API for serving JSON documents. Also try a little TDD in Go to see how easy it could be.&lt;/p&gt;

&lt;p&gt;On the test it&amp;rsquo;s easy to mock whatever you need, because function are first class citizens,
so you can have implementations on fly. And some of the clasess of the standard library they have test utilities like &amp;lsquo;httptest&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Here the test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
  &amp;quot;github.com/bmizerany/assert&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;net/http/httptest&amp;quot;
    &amp;quot;testing&amp;quot;
)

func TestJsonServerReturnsJsonDocumentWithRightHeaders(t *testing.T) {

    req := new(http.Request)

    builder := func(req *http.Request) interface{} {
        return map[string]interface{}{
            &amp;quot;test&amp;quot;: &amp;quot;test_value&amp;quot;,
        }
    }

    jsonServer := JsonServer(builder)
    responseWriter := httptest.NewRecorder()

    // call to test
    jsonServer(responseWriter, req)

    contentType := responseWriter.Header().Get(&amp;quot;Content-Type&amp;quot;)
    assert.Equal(t, contentType, &amp;quot;application/json&amp;quot;)

    assert.Equal(t, &amp;quot;{\&amp;quot;test\&amp;quot;:\&amp;quot;test_value\&amp;quot;}\n&amp;quot;, responseWriter.Body.String())

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now the implementation, with a little functional style.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import (
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;github.com/bmizerany/pat&amp;quot;
  &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
)

type httpHandlerFunc func(w http.ResponseWriter, req *http.Request)
type jsonHttpBuilderFunc func(req *http.Request) interface{}

func JsonBuilder(req *http.Request) interface{} {
    jsonMap := make(map[string]interface{})
    name := req.URL.Query().Get(&amp;quot;:name&amp;quot;)
    jsonMap[&amp;quot;message&amp;quot;] = &amp;quot;hello &amp;quot; + name
    return jsonMap
}

func JsonServer(builderFunc jsonHttpBuilderFunc) (hanlderFunc httpHandlerFunc) {
    hanlderFunc = func(w http.ResponseWriter, req *http.Request) {
        enc := json.NewEncoder(w)
        jsonMap := builderFunc(req)
        w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
        if err := enc.Encode(&amp;amp;jsonMap); err != nil {
            log.Fatal(err)
        }
    }
    return
}

func main() {
    m := pat.New()
    m.Get(&amp;quot;/api/hello/:name&amp;quot;, http.HandlerFunc(JsonServer(JsonBuilder)))

    http.Handle(&amp;quot;/&amp;quot;, m)
    err := http.ListenAndServe(&amp;quot;:3000&amp;quot;, nil)
    if err != nil {
        log.Fatal(&amp;quot;ListenAndServe: &amp;quot;, err)
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>